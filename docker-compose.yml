services:
  # Backend (Django)
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: backend
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    env_file:
      - ./backend/.env
    environment:
      - DJANGO_SETTINGS_MODULE=app.settings
    ports:
      - "8000:8000"
    networks:
      - transcendance-network
    volumes:
      - ./backend:/app
      - ./nginx/certs:/app/certs
    restart: on-failure:5

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    depends_on:
      - backend
    ports:
      - "3000:3000"
    networks:
      - transcendance-network
    volumes:
      - ./frontend:/app
      - /app/node_modules

  #Web Server (Nginx)
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx
    depends_on:
      - backend
      - frontend
    ports:
      - "80:80"
      - "443:443"
    networks:
      - transcendance-network
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/certs:/etc/nginx/certs
    restart: on-failure:5

  # Database (Postgres)
  postgres:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    networks:
      - transcendance-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 2s
      retries: 5

  # Redis Cache & Websocket
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - transcendance-network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 2s
      retries: 5

  # vault:

  # elk:

  # prometheus:

  # graphana:

# Volumes
volumes:
  postgres_data:
    name: postgres_data
  redis_data:
    name: redis_data

# Network
networks:
  transcendance-network:
    name: transcendance-network
    driver: bridge
