version: '3.8'

services:
  #BACKEND
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    command: python manage.py runserver 0.0.0.0:8000
    environment:
      - DJANGO_SETTINGS_MODULE=transcendance.settings
    env_file:
      - ./backend/.env
    depends_on:
      - postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    networks:
      - transcendance-network
    restart: on-failure:5

  #FRONTEND
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    volumes:
      - ./frontend:/app
    ports:
      - "3000:3000"
    networks:
      - transcendance-network

  #WEB SERVER
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx
    depends_on:
      - backend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/certs:/etc/nginx/certs
    ports:
      - "80:80"
      - "443:443"
    networks:
      - frontend
    restart: on-failure:5

  #DATABASE
  postgres:
    build:
      context: ./database
      dockerfile: Dockerfile
    image: postgres:15
    container_name: postgres_db
    env_file:
      - .env
    # or
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - transcendance-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 20s
      retries: 10
      start_period: 30s

  # redis:

  # vault:

  # elk:

  # prometheus:

  # graphana:

# Volumes
volumes:
  postgres_data:
    name: postgres_data

# Network
networks:
  transcendance-network:
    name: transcendance-network
    driver: bridge
